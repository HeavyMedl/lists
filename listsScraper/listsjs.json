[{"n":"append","t":"(arr1|str, arr2|str|num) -> [x]|str","d":"A prefix-style Array.prototype.concat wrapper.","s":"Give arg 1 an Array or a String; Give arg 2 an Array or a String or a Number; Get an Array of variables or String.","c":"lists.append([1],[2]); /* [1,2] */ \nlists.append([1],2); /* [1,2] */ \nlists.append('a','b'); /* 'ab' */\n"},{"n":"head","t":"(arr|str) -> x","d":"Retreive the first element of an Array or a String.","s":"Give arg 1 an Array or a String; Get a variable.","c":"lists.head([1,2]); /* 1 */ \nlists.head([[1,2],[3,4]]); /* [1,2]  */ \nlists.head('ab'); /* 'a' */\n"},{"n":"last","t":"(arr|str) -> x","d":"Retreive the last element of an Array or a String.","s":"Give arg 1 an Array or a String; Get a variable.","c":"lists.last([1,2]); /* 2 */ \nlists.last([[1,2],[3,4]]); /* [3,4] */ \nlists.last('ab'); /* 'b' */\n"},{"n":"init","t":"(arr|str) -> [x]","d":"Retreive all elements except the last of an Array or a String.","s":"Give arg 1 an Array or a String; Get an Array of variables.","c":"lists.init([1,2,3]); /* [1,2] */ \nlists.init([[1,2],[3,4],[5,6]]); /* [[1,2],[3,4]]  */ \nlists.init('abc'); /* ['a','b'] */\n"},{"n":"tail","t":"(arr|str) -> [x]","d":"Retreive all elements except the first of an Array or a String.","s":"Give arg 1 an Array or a String; Get an Array of variables.","c":"lists.tail([1,2,3]); /* [2,3] */ \nlists.tail([[1,2],[3,4],[5,6]]); /* [[3,4],[5,6]]  */ \nlists.tail('abc'); /* ['b','c'] */\n"},{"n":"nil","t":"(arr|str) -> boolean","d":"Test if an Array or String is empty.","s":"Give arg 1 an Array or a String; Get a boolean.","c":"lists.nil(null); /* true */ \nlists.nil([]); /* true */ \nlists.nil(''); /* true */ \nlists.nil('a'); /* false */ \nlists.nil([1]); /* false */\n"},{"n":"map","t":"([x], f) -> [x]","d":"Array returned by applying f to each element of [x]","s":"Give arg 1 an Array or a String; Give arg 2 a Function; Get an Array of variables.","c":"lists.map([1,2,3], function(x) { return x*2 }); /* [2,4,6] */\nlists.map('abc', function(str) { return str.toUpperCase() }); /* [\"A\",\"B\",\"C\"] */\nlists.map([{'S': 1}, {'u': 2}, {'p': 3}], function(obj) {\n  return lists.flatten(lists.keys(obj))\n}); /* [\"S\", \"u\", \"p\"] */\n"},{"n":"rev","t":"([x]) -> [x]","d":"Array returned by reversing the order of each element.","s":"Give arg 1 an Array or a String; Get an Array of variables.","c":"lists.rev([1,2,3]); /* [3,2,1] */\nlists.rev('abc'); /* ['c','b','a'] */\nlists.rev([[2],[3]]) /* [[3],[2]] */\n"},{"n":"intersperse","t":"(x,[x]) -> arr|str","d":"Array returned by interspersing a given separator between elements of a given Array.","s":"Give arg 1 a variable; Give arg 2 an Array of variables; Get an Array of variables.","c":"lists.intersperse(1,[5,5,5]); /* [5,1,5,1,5] */\nlists.intersperse([1,2],[[6],[6]]); /* [[6],[1,2],[6]] */\nlists.intersperse('b','ac'); /* 'abc' */\nlists.intersperse({b:2},[{a:1},{b:3}]); /* [{a:1},{b:2},{c:3}] */\n"},{"n":"intercalate","t":"([x],[[x]]) -> [x]","d":"Array returned by flattening the result of interspersing an Array of varaibles into an Array of Arrays.","s":"Give arg 1 an Array of variables; Give arg 2 an Array of Arrays of variables; Get an Array of variables.","c":"lists.intercalate([1],[[5],[5],[5]]); /* = lists.flatten(lists.intersperse([1],[[5],[5],[5]])) // [5,1,5,1,5] */\nlists.intercalate([\"abc\"],[[\"efg\"],[\"qrs\"]]) /* [\"efg\", \"abc\", \"qrs\"] */\nlists.intercalate([{a:1}],[[{b:1}],[{c:2}]]); /* [{b:1},{a:1},{c:2}] */\n"},{"n":"transpose","t":"([[x]]) -> [[x]]","d":"Array returned by transposing rows and columns of given arguments.","s":"Give arg 1 an Array of Arrays of variables; Get an Array of Arrays of variables.","c":"lists.transpose([[1,2,4],[3,4,4]]) /* [[1,3],[2,4],[4,4]] */\nlists.transpose([[\"a\",\"b\",\"c\"],[\"a\",\"b\",\"c\"]]) /* [[\"a\",\"a\"],[\"b\",\"b\"],[\"c\",\"c\"]] */\n"},{"n":"subsequences","t":"([x]) -> [[x]]","d":"Array of Arrays of all subsequences of a given arguement.","s":"Give arg 1 an Array of variables; Get an Array of Arrays of variables.","c":"lists.subsequences('ab') /* [[],['a'],['b'],['ab']] */\nlists.subsequences([1,2,3]) /* [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]] */\n"},{"n":"permutations","t":"([x]|str) -> [[x]]|[str]","d":"Array of Arrays or Array of Strings returned by getting all permutations of a given arguement.","s":"Give arg 1 an Array of variables or a String; Get an Array of Arrays of variables or an Array of Strings respectively.","c":"lists.permutations('abc') /* [\"abc\",\"acb\",\"bac\",\"bca\",\"cab\",\"cba\"] */\nlists.permutations([1,2,3]) /* [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]] */\n"},{"n":"foldl","t":"(x,[x]|str,f) -> x","d":"Variable returned reducing left to right by applying a binary operator function (f) on a starting variable (x), known as the accumulator, and an Array of variables or String  ","s":"Give arg 1 a starting variable (usually a left identity of the binary operator); Give arg 2 an Array of variables or a String; Give arg 3 a function (binary operator); Get a variable.","c":"reverse = lists.foldl('','abc',function(x,y){ return y.concat(x); }); /* \"cba\" */\nsum = lists.foldl(0,[1,2,3],function(x,y){ return x+y; }); /* 6 */\nlists.foldl([], [[1,2],[3,4]], function(x,y) {return x.concat(y) }) /* [1,2,3,4] */\n"},{"n":"foldl1","t":"([x]|str,f) -> x","d":"Variant of foldl without a starting variable (The accumulator begins with the 0th index of the passed Array or String). Use with non-empty Arrays or Strings.","s":" Give arg 1 an Array of variables or a String; Give arg 2 a function (binary operator); Get a variable.","c":"lists.foldl1('abc',function(x,y){ return x.concat(y).toUpperCase() }) /* \"ABC\" */\nlists.foldl1([1,2,3],function(x,y){ return x+y }) /* 6 */\n"},{"n":"foldr","t":"(x,[x]|str,f) -> x","d":"Variable returned reducing right to left by applying a binary operator function (f) on a starting variable (x), known as the accumulator, and an Array of variables or String  ","s":"Give arg 1 a starting variable (usually a right identity of the binary operator); Give arg 2 an Array of variables or a String; Give arg 3 a function (binary operator); Get a variable.","c":"lists.foldr(0,[1,2,3,4],function(x,y){ return x-y; }) /* -2 */\nlists.foldr([],[[1,2],[3,4],[5,6]],function(x,y){ \n  return lists.rev(x).concat(y); \n}); /* [4,3,1,2,5,6] */\n"},{"n":"foldr1","t":"([x]|str,f) -> x","d":"Variant of foldr without a starting variable (The accumulator begins with the 0th index of the passed Array or String). Use with non-empty Arrays or Strings.","s":"Give arg 1 an Array of variables or a String; Give arg 2 a function (binary operator); Get a variable.","c":"lists.foldr1([1,2,3],function(x,y){ return x - y }) /* 3 */\nlists.foldr1('aabbcc',function(x,y){ return x=='a'? x=y : x.concat(y)}) /* \"bbcc\" */\n"},{"n":"flatten || concat","t":"([[x]]|[str]) -> [x]|str","d":"Flatten an Array of Arrays or an Array of String into an Array of variables or String respectively.","s":"Give arg 1 an Array of Arrays of variables or a String; Get an Array of variables or a String","c":"lists.flatten(['abc']); /* 'abc' */\nlists.flatten([[1,2],[3,4]]) /* [1,2,3,4] */\n"},{"n":"concatMap","t":"([x]|str,f) -> [x]|str","d":"Array of variables or String returned by mapping a function over an Array of variables or String and flattening the result","s":"Give arg 1 an Array of variables or a String; Give arg 2 a function that produces an Array of variables or String; Get an Array of variables or a String","c":"lists.concatMap(['bang','bang'], function(x){ return x+'!'}) /* \"bang!bang!\" */\nlists.concatMap([1,2,3],function(x){ return [[x*2,x/2]] }) /* [[2,0.5],[4,1],[6,1.5]] */\nlists.concatMap([{a:1},{b:2}], function(x){\n  x.prop = 'hi';  \n  return [x]\n}); /* [{a:1,prop:\"hi\"},{b:2,prop:\"hi\"}]*/\n"},{"n":"and","t":"([boolean]) -> boolean","d":"Boolean returned by the conjunction of an Array of booleans. True if all booleans are true. False if one or more booleans is false.","s":"Give arg 1 an Array of booleans. Get a boolean.","c":"lists.and([5>1,5>2,5>3]) /* true */\nlists.and([5>1,false,5>3]) /* false */\n"},{"n":"or","t":"([boolean]) -> boolean","d":"Boolean returned by the disjunction of an Array of booleans. True if at least one boolean is true. False if all booleans are false.","s":"Give arg 1 an Array of booleans. Get a boolean.","c":"lists.or([5<1,5<2,5>3]) /* true */\nlists.or([5<1,5<2,5<3]) /* false */\n"},{"n":"any","t":"([x]|str,f) -> boolean","d":"Boolean returned by applying a predicate function to each element in an Array of variables or String. True if at least one f(x) is true. False if all f(x) are false.","s":"Give arg 1 an Array of variables or String; Give arg 2 a predicate function to be applied to each element of arg 1; Get a boolean.","c":"lists.any([1,2,3],function(x) { return x < .5}) /* false */\nlists.any('abc',function(x) { return x == 'b'}) /* true */\n"},{"n":"all","t":"([x]|str,f) -> boolean","d":"Boolean returned by applying a predicate function to each element in an Array of variables or String. True if all f(x) are true. False if any f(x) are false.","s":"Give arg 1 an Array of variables or String; Give arg 2 a predicate function to be applied to each element of arg 1; Get a boolean.","c":"lists.all('abc', function(x){ return x==x.toUpperCase() }) /* false */\nlists.all([2,4], function(x) { return x > 3 }) /* false */\nlists.all([2,4], function(x) { return x%2==0 }) /* true */\n"},{"n":"sum","t":"([num]) -> num","d":"Number returned by summing the numbers of an Array together.","s":"Give arg 1 an Array of Numbers; Get a number.","c":"lists.sum([2,4,6]) /* 12 */\nlists.sum([.2,.4,.6]) /* 1.2000000000000002 */\n"},{"n":"product","t":"([num]) -> num","d":"Number returned by computing the product of the numbers of an Array.","s":"Give arg 1 an Array of Numbers; Get a number.","c":"lists.product([2,4,6]) /* 48 */\nlists.product([.2,.4,.6]) /* 0.04800000000000001 */\n"},{"n":"maximum","t":"([num]) -> num","d":"Maximum number returned from numbers of an Array.","s":"Give arg 1 an Array of Numbers; Get a number.","c":"lists.maximum([2,4,6]) /* 6 */\nlists.maximum([.2,.4,.6]) /* .6 */\n"},{"n":"minimum","t":"([num]) -> num","d":"Minimum number returned from numbers of an Array.","s":"Give arg 1 an Array of Numbers; Get a number.","c":"lists.minimum([2,4,6]) /* 2 */\nlists.minimum([.2,.4,.6]) /* .2 */\n"},{"n":"maxList","t":"([[x]]) -> [x]","d":"Array of variables with the maximum length returned from an Array of Arrays of variables.","s":"Give arg 1 an Array of Arrays of variables; Get an Array of variables.","c":"lists.maxList([[1],[2,3]]) /* [2,3] */\nlists.maxList([[1,2],[3]]) /* [1,2] */\n"},{"n":"minList","t":"([[x]]) -> [x]","d":"Array of variables with the minimum length returned from an Array of Arrays of variables.","s":"Give arg 1 an Array of Arrays of variables; Get an Array of variables.","c":"lists.minList([[],[1]]) /* [] */\nlists.minList([[1,2],[3]]) /* [3] */\n"},{"n":"scanl","t":"(x,[x]|str,f) -> [x]","d":"Array of variables returned building left to right, starting with the accumulator (x) by applying a binary operator function (f) on a starting variable (x) and an Array of variables or String ","s":"Give arg 1 a starting variable; Give arg 2 an Array of variables or a String; Give arg 3 a function (binary operator); Get an Array of variables.","c":"lists.scanl('.','abc',function(x,y){return x + y}) /* [\".\",\".a\",\".ab\",\".abc\"] */\nlists.scanl(0,[1,2,3],function(x,y){return x + y}) /* [0,1,3,6] */\n"},{"n":"scanr","t":"(x,[x]|str,f) -> [x]","d":"Array of variables returned building right to left, starting with the accumulator (x) by applying a binary operator function (f) on a starting variable (x) and an Array of variables or String ","s":"Give arg 1 a starting variable; Give arg 2 an Array of variables or a String; Give arg 3 a function (binary operator); Get an Array of variables.","c":"lists.scanr('.','abc',function(x,y){return x + y}) /* [\"abc.\",\"bc.\",\"c.\",\".\"] */\nlists.scanr(0,[1,2,3],function(x,y){return x + y}) /* [6,5,3,0] */\n"},{"n":"mapAccumL","t":"(x,[x]|str,f) -> [x, [x]]","d":"Builds an Array containing a accumulator (x) and the result of applying f to the supplied accumulator and each element of the supplied Array from left to right.","s":"Give arg 1 a starting variable (accumulator); Give arg 2 an Array of variables or a String; Give arg 3 a function; Get an Array of variable followed by Array of variables.","c":"lists.mapAccumL(5, [2,4,8], function(x,y){ return [x+y,x*y]}) /* [19, [10,28,88]]*/\nlists.mapAccumL(5, [2,4,8], function(x,y){ return [y,y]}) /* [8, [2,4,8]] */\nlists.mapAccumL(5, [5,5,5], function(x,y){ return [x,x]}) /* [5, [5,5,5]] */\n"},{"n":"mapAccumR","t":"(x,[x]|str,f) -> [x, [x]]","d":"Builds an Array containing a accumulator (x) and the result of applying f to the supplied accumulator and each element of the supplied Array from right to left.","s":"Give arg 1 a starting variable (accumulator); Give arg 2 an Array of variables or a String; Give arg 3 a function; Get an Array of variable followed by Array of variables.","c":"lists.mapAccumR(5, [2,4,8], function(x,y){ return [x+y,x*y]}) /* [19, [34,52,40]]*/\nlists.mapAccumR(5, [2,4,8], function(x,y){ return [y,y]}) /* [2, [2,4,8]] */\nlists.mapAccumR(5, [5,5,5], function(x,y){ return [x,x]}) /* [5, [5,5,5]] */\n"},{"n":"iterate","t":"(x,num,f) -> [x]","d":"Builds an Array containing the successive application of f to the previous result of f(x) until the stop (num) reaches 0.","s":"Give arg 1 a variable; Give arg 2 a number; Give arg 3 a function; Get an Array of variables.","c":"lists.iterate('a',3,function(ch){return ch+'b'}) /* [\"a\",\"ab\",\"abb\"] */\nlists.iterate([1,2],3,function(xs){return lists.intersperse(6,xs)}) /* [[1,2],[1,6,2],[1,6,6,6,2]] */\nlists.iterate(2,4,function(x){ return x*x }) /* [2,4,16,256] */\n"},{"n":"replicate","t":"(x,num) -> [x]","d":"Builds an Array containing replications of x until the stop (num) reaches 0.","s":"Give arg 1 a variable; Give arg 2 a number; Get an Array of variables.","c":"lists.replicate(5,5) /* [5,5,5,5,5] */\nlists.replicate([1,2],2) /* [[1,2],[1,2]] */\nlists.replicate({a:1},2) /* [{a:1},{a:2}] */\n"},{"n":"cycle","t":"([x]|str,num) -> [x]|str","d":"Builds an Array containing replications of flattened [x]|String until the stop (num) reaches 0.","s":"Give arg 1 an Array of variables; Give arg 2 a number; Get an Array of variables.","c":"lists.cycle('abc',3) /* \"abcabcabc\" */\nlists.cycle([1,2],2) /* [1,2,1,2] */\n"},{"n":"unfold","t":"(f,f,f,x) -> [x]|str","d":"Builds an Array from a seed value. Arg 1 is the predicate function. If the predicate fails, return an empty Array, otherwise concatenate the result of Arg 2 (f) applied to Arg 4 (x) to the recursive call of unfold calling Arg 3 (f) to Arg 4 (x). This is a corecursive anamorphism.","s":"Give arg 1 an function (predicate); Give arg 2 a function; Give arg 3 a function; Give arg 4 a variable (seed).","c":"function chop8(xs){ \n  return l.unfold(l.nil,l.part(l.take,8,_),l.part(l.drop,8,_),xs) \n}\nchop8([1,2,3,4,5,6,7,8,9]) /* [[1,2,3,4,5,6,7,8],[9]] */\n\nfunction unfoldMap(xs,f) { \n  return lists.unfold(\n    lists.nil, \n    lists.part(lists.pipe(f,lists.head),_), \n    lists.part(lists.tail,_), \n    xs)\n}\nunfoldMap([1,2],function(x){ return x * 2 }) /* [2,4] */\n"},{"n":"take","t":"(num,[x]|str) -> [x]","d":"Array of variables returned by taking the first n (num) elements from [x] or String.","s":"Give arg 1 a number; Give arg 2 an Array of variables or String; Get an Array of variables.","c":"lists.take(2,[1,2,3]) /* [1,2] */\nlists.take(2,'abc') /* [\"a\",\"b\"] */\n"},{"n":"drop","t":"(num,[x]|str) -> [x]","d":"Array of variables returned by dropping the first n (num) elements from [x] or String.","s":"Give arg 1 a number; Give arg 2 an Array of variables or String; Get an Array of variables.","c":"lists.drop(2,[1,2,3]) /* [3] */\nlists.drop(2,'abc') /* [\"c\"] */\n"},{"n":"splitAt","t":"(num,[x]|str) -> [[x],[x]]","d":"Array of two Arrays returned. The first Array contains the first n elements of the supplied Array of variables or String. The second contains the rest.","s":"Give arg 1 a number; Give arg 2 an Array of variables or String; Get an Array of two Arrays of variables.","c":"lists.splitAt(2,'abc') /* [['a','b'],['c']] */\nlists.splitAt(2,[1,2,3]) /* [[1,2],[3]] */\n"},{"n":"takeWhile","t":"(f,[x]|str) -> [x]","d":"Array of variables returned by taking elements from [x]|String that satisfy a supplied predicate function until that predicate function is unsatisfied.","s":"Give arg 1 a function; Give arg 2 an Array of variables or String; Get an Array of variables.","c":"lists.takeWhile([1,2,3,1], function(x){ return x < 3 }) /* [1,2] */\nlists.takeWhile([1], function(x){ return x < 2 }) /* [1] */\nlists.takeWhile('aabc', function(x){ return x =='a' }) /* [\"a\",\"a\"] */\n"},{"n":"dropWhile","t":"(f,[x]|str) -> [x]","d":"Array of variables returned by dropping elements from [x]|String that satisfy a supplied predicate function until that predicate function is unsatisfied.","s":"Give arg 1 a function; Give arg 2 an Array of variables or String; Get an Array of variables.","c":"lists.dropWhile([1,2,3,4], function(x){ return x < 3 }) /* [3,4] */\nlists.dropWhile([1], function(x){ return x < 2 }) /* [2] */\nlists.dropWhile('aabc', function(x){ return x =='a' }) /* [\"b\",\"c\"] */\n"}]